{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["OpenSeadragon","require","$","version","major","Error","onOutsideDrag","e","this","viewer","setMouseNavEnabled","point","bounds","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","rect","oldRect","restrictToImage","clone","rectDone","allowRotation","angle1","getAngleFromCenter","angle2","rotation","Math","PI","startRotated","getPrerotatedRect","rotatedStartPoint","startRotatedHeight","width","height","world","getHomeBounds","fitsIn","Rect","prop","restrictVector","SelectionRect","draw","raiseEvent","normalize","onOutsideDragEnd","abs","onClick","canvas","focus","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onBorderDrag","border","center","getDegreeRotation","rotate","getCenter","newCenter","minus","onBorderDragEnd","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","atan2","heightModDelta","Viewer","prototype","selection","options","selectionInstance","Selection","handle","extend","isSelecting","buttonActiveImg","toggleButton","showSelectionControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onSelection","onMoveStart","onMoveEnd","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","selectionConfirm","selectionCancel","borderStyle","color","handleStyle","top","left","margin","background","cornersStyle","makeNeutralElement","style","className","borders","corners","i","MouseTracker","dragHandler","bind","dragEndHandler","appendChild","setTimeout","right","bottom","overlay","SelectionOverlay","innerTracker","clickTimeThreshold","clickDistThreshold","delegate","clickHandler","outerTracker","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","confirmButton","classList","add","cancelButton","cancel","transform","addHandler","ControlDock","setState","enabled","setTracking","undraw","visibility","setAllowRotation","enable","disable","update","drawHTML","drawer","destroy","result","real","viewportToImageRectangle","fromRect","round","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","equals","other","toString","swapWidthHeight","swapped","diff","fixed","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragonselection.js","sourcesContent":["var OpenSeadragon = require('openseadragon');\r\n(function ($) {\r\n    'use strict';\r\n\r\n    if (!$.version || $.version.major < 2) {\r\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\r\n    }\r\n\r\n    $.Viewer.prototype.selection = function (options) {\r\n        if (!this.selectionInstance || options) {\r\n            options = options || {};\r\n            options.viewer = this;\r\n            this.selectionInstance = new $.Selection(options);\r\n        }\r\n        return this.selectionInstance;\r\n    };\r\n\r\n\r\n    /**\r\n    * @class Selection\r\n    * @classdesc Provides functionality for selecting part of an image\r\n    * @memberof OpenSeadragon\r\n    * @param {Object} options\r\n    */\r\n    $.Selection = function (options) {\r\n\r\n        $.extend(true, this, {\r\n            // internal state properties\r\n            viewer: null,\r\n            isSelecting: false,\r\n            buttonActiveImg: false,\r\n            rectDone: true,\r\n\r\n            // options\r\n            element: null,\r\n            toggleButton: null,\r\n            showSelectionControl: true,\r\n            showConfirmDenyButtons: true,\r\n            styleConfirmDenyButtons: true,\r\n            returnPixelCoordinates: true,\r\n            keyboardShortcut: 'c',\r\n            rect: null,\r\n            allowRotation: true,\r\n            startRotated: false, // useful for rotated crops\r\n            startRotatedHeight: 0.1,\r\n            restrictToImage: false,\r\n            onSelection: null,\r\n            onMoveStart: null,\r\n            onMoveEnd: null,\r\n            prefixUrl: null,\r\n            navImages: {\r\n                selection: {\r\n                    REST: 'selection_rest.png',\r\n                    GROUP: 'selection_grouphover.png',\r\n                    HOVER: 'selection_hover.png',\r\n                    DOWN: 'selection_pressed.png'\r\n                },\r\n                selectionConfirm: {\r\n                    REST: 'selection_confirm_rest.png',\r\n                    GROUP: 'selection_confirm_grouphover.png',\r\n                    HOVER: 'selection_confirm_hover.png',\r\n                    DOWN: 'selection_confirm_pressed.png'\r\n                },\r\n                selectionCancel: {\r\n                    REST: 'selection_cancel_rest.png',\r\n                    GROUP: 'selection_cancel_grouphover.png',\r\n                    HOVER: 'selection_cancel_hover.png',\r\n                    DOWN: 'selection_cancel_pressed.png'\r\n                },\r\n            },\r\n            borderStyle: {\r\n                width: '1px',\r\n                color: '#fff'\r\n            },\r\n            handleStyle: {\r\n                top: '50%',\r\n                left: '50%',\r\n                width: '6px',\r\n                height: '6px',\r\n                margin: '-4px 0 0 -4px',\r\n                background: '#000',\r\n                border: '1px solid #ccc'\r\n            },\r\n            cornersStyle: {\r\n                width: '6px',\r\n                height: '6px',\r\n                background: '#000',\r\n                border: '1px solid #ccc'\r\n            }\r\n\r\n        }, options);\r\n\r\n        $.extend(true, this.navImages, this.viewer.navImages);\r\n\r\n        if (!this.element) {\r\n            this.element = $.makeNeutralElement('div');\r\n            this.element.style.background = 'rgba(0, 0, 0, 0.1)';\r\n            this.element.className = 'selection-box';\r\n        }\r\n        this.borders = this.borders || [];\r\n        var handle;\r\n        var corners = [];\r\n        for (var i = 0; i < 4; i++) {\r\n            if (!this.borders[i]) {\r\n                this.borders[i] = $.makeNeutralElement('div');\r\n                this.borders[i].className = 'border-' + i;\r\n                this.borders[i].style.position = 'absolute';\r\n                this.borders[i].style.width = this.borderStyle.width;\r\n                this.borders[i].style.height = this.borderStyle.width;\r\n                this.borders[i].style.background = this.borderStyle.color;\r\n            }\r\n\r\n            handle = $.makeNeutralElement('div');\r\n            handle.className = 'border-' + i + '-handle';\r\n            handle.style.position = 'absolute';\r\n            handle.style.top = this.handleStyle.top;\r\n            handle.style.left = this.handleStyle.left;\r\n            handle.style.width = this.handleStyle.width;\r\n            handle.style.height = this.handleStyle.height;\r\n            handle.style.margin = this.handleStyle.margin;\r\n            handle.style.background = this.handleStyle.background;\r\n            handle.style.border = this.handleStyle.border;\r\n            new $.MouseTracker({\r\n                element: this.borders[i],\r\n                dragHandler: onBorderDrag.bind(this, i),\r\n                dragEndHandler: onBorderDragEnd.bind(this, i),\r\n            });\r\n\r\n            corners[i] = $.makeNeutralElement('div');\r\n            corners[i].className = 'corner-' + i + '-handle';\r\n            corners[i].style.position = 'absolute';\r\n            corners[i].style.width = this.cornersStyle.width;\r\n            corners[i].style.height = this.cornersStyle.height;\r\n            corners[i].style.background = this.cornersStyle.background;\r\n            corners[i].style.border = this.cornersStyle.border;\r\n            new $.MouseTracker({\r\n                element: corners[i],\r\n                dragHandler: onBorderDrag.bind(this, i + 0.5),\r\n                dragEndHandler: onBorderDragEnd.bind(this, i),\r\n            });\r\n\r\n            this.borders[i].appendChild(handle);\r\n            this.element.appendChild(this.borders[i]);\r\n            // defer corners, so they are appended last\r\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\r\n        }\r\n        this.borders[0].style.top = 0;\r\n        this.borders[0].style.width = '100%';\r\n        this.borders[1].style.right = 0;\r\n        this.borders[1].style.height = '100%';\r\n        this.borders[2].style.bottom = 0;\r\n        this.borders[2].style.width = '100%';\r\n        this.borders[3].style.left = 0;\r\n        this.borders[3].style.height = '100%';\r\n        corners[0].style.top = '-3px';\r\n        corners[0].style.left = '-3px';\r\n        corners[1].style.top = '-3px';\r\n        corners[1].style.right = '-3px';\r\n        corners[2].style.bottom = '-3px';\r\n        corners[2].style.right = '-3px';\r\n        corners[3].style.bottom = '-3px';\r\n        corners[3].style.left = '-3px';\r\n\r\n        if (!this.overlay) {\r\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\r\n        }\r\n\r\n        this.innerTracker = new $.MouseTracker({\r\n            element: this.element,\r\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n            clickDistThreshold: this.viewer.clickDistThreshold,\r\n            dragHandler: $.delegate(this, onInsideDrag),\r\n            dragEndHandler: $.delegate(this, onInsideDragEnd),\r\n            // keyHandler:         $.delegate( this, onKeyPress ),\r\n            clickHandler: $.delegate(this, onClick),\r\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\r\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\r\n        });\r\n\r\n        this.outerTracker = new $.MouseTracker({\r\n            element: this.viewer.canvas,\r\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n            clickDistThreshold: this.viewer.clickDistThreshold,\r\n            dragHandler: $.delegate(this, onOutsideDrag),\r\n            dragEndHandler: $.delegate(this, onOutsideDragEnd),\r\n            clickHandler: $.delegate(this, onClick),\r\n            startDisabled: !this.isSelecting,\r\n        });\r\n\r\n        if (this.keyboardShortcut) {\r\n            $.addEvent(\r\n                this.viewer.container,\r\n                'keypress',\r\n                $.delegate(this, onKeyPress),\r\n                false\r\n            );\r\n        }\r\n\r\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\r\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\r\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\r\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\r\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\r\n        if (this.showSelectionControl) {\r\n            this.toggleButton = new $.Button({\r\n                element: this.toggleButton ? $.getElement(this.toggleButton) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip: $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\r\n                srcRest: prefix + this.navImages.selection.REST,\r\n                srcGroup: prefix + this.navImages.selection.GROUP,\r\n                srcHover: prefix + this.navImages.selection.HOVER,\r\n                srcDown: prefix + this.navImages.selection.DOWN,\r\n                onRelease: this.toggleState.bind(this),\r\n                onFocus: onFocusHandler,\r\n                onBlur: onBlurHandler\r\n            });\r\n            if (useGroup) {\r\n                this.viewer.buttons.buttons.push(this.toggleButton);\r\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\r\n            }\r\n            if (this.toggleButton.imgDown) {\r\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\r\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\r\n            }\r\n        }\r\n        if (this.showConfirmDenyButtons) {\r\n            this.confirmButton = new $.Button({\r\n                element: this.confirmButton ? $.getElement(this.confirmButton) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip: $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\r\n                srcRest: prefix + this.navImages.selectionConfirm.REST,\r\n                srcGroup: prefix + this.navImages.selectionConfirm.GROUP,\r\n                srcHover: prefix + this.navImages.selectionConfirm.HOVER,\r\n                srcDown: prefix + this.navImages.selectionConfirm.DOWN,\r\n                onRelease: this.confirm.bind(this),\r\n                onFocus: onFocusHandler,\r\n                onBlur: onBlurHandler\r\n            });\r\n            var confirm = this.confirmButton.element;\r\n            confirm.classList.add('confirm-button');\r\n            this.element.appendChild(confirm);\r\n\r\n            this.cancelButton = new $.Button({\r\n                element: this.cancelButton ? $.getElement(this.cancelButton) : null,\r\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\r\n                clickDistThreshold: this.viewer.clickDistThreshold,\r\n                tooltip: $.getString('Tooltips.SelectionCancel') || 'Cancel selection',\r\n                srcRest: prefix + this.navImages.selectionCancel.REST,\r\n                srcGroup: prefix + this.navImages.selectionCancel.GROUP,\r\n                srcHover: prefix + this.navImages.selectionCancel.HOVER,\r\n                srcDown: prefix + this.navImages.selectionCancel.DOWN,\r\n                onRelease: this.cancel.bind(this),\r\n                onFocus: onFocusHandler,\r\n                onBlur: onBlurHandler\r\n            });\r\n            var cancel = this.cancelButton.element;\r\n            cancel.classList.add('cancel-button');\r\n            this.element.appendChild(cancel);\r\n\r\n            if (this.styleConfirmDenyButtons) {\r\n                confirm.style.position = 'absolute';\r\n                confirm.style.top = '50%';\r\n                confirm.style.left = '50%';\r\n                confirm.style.transform = 'translate(-100%, -50%)';\r\n\r\n                cancel.style.position = 'absolute';\r\n                cancel.style.top = '50%';\r\n                cancel.style.left = '50%';\r\n                cancel.style.transform = 'translate(0, -50%)';\r\n            }\r\n        }\r\n\r\n        this.viewer.addHandler('selection', this.onSelection);\r\n        this.viewer.addHandler('move_start', this.onMoveStart);\r\n        this.viewer.addHandler('move_end', this.onMoveEnd);\r\n\r\n        this.viewer.addHandler('open', this.draw.bind(this));\r\n        this.viewer.addHandler('animation', this.draw.bind(this));\r\n        this.viewer.addHandler('resize', this.draw.bind(this));\r\n        this.viewer.addHandler('rotate', this.draw.bind(this));\r\n    };\r\n\r\n    $.extend($.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\r\n\r\n        toggleState: function () {\r\n            return this.setState(!this.isSelecting);\r\n        },\r\n\r\n        setState: function (enabled) {\r\n            this.isSelecting = enabled;\r\n            // this.viewer.innerTracker.setTracking(!enabled);\r\n            this.outerTracker.setTracking(enabled);\r\n            enabled ? this.draw() : this.undraw();\r\n            if (this.buttonActiveImg) {\r\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\r\n            }\r\n            this.viewer.raiseEvent('selection_toggle', { enabled: enabled });\r\n            return this;\r\n        },\r\n\r\n        setAllowRotation: function (allowRotation) {\r\n            this.allowRotation = allowRotation;\r\n        },\r\n\r\n        enable: function () {\r\n            return this.setState(true);\r\n        },\r\n\r\n        disable: function () {\r\n            return this.setState(false);\r\n        },\r\n\r\n        draw: function () {\r\n            if (this.rect) {\r\n                this.overlay.update(this.rect.normalize());\r\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        undraw: function () {\r\n            this.overlay.destroy();\r\n            this.rect = null;\r\n            return this;\r\n        },\r\n\r\n        confirm: function () {\r\n            if (this.rect) {\r\n                var result = this.rect.normalize();\r\n                if (this.returnPixelCoordinates) {\r\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\r\n                    real = $.SelectionRect.fromRect(real).round();\r\n                    real.rotation = result.rotation;\r\n                    result = real;\r\n                }\r\n                this.viewer.raiseEvent('selection', result);\r\n                this.undraw();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        cancel: function () {\r\n            /*\r\n             * These two lines have been added to fix a issue with mobile where the selection is just a pinpoint after the first drag\r\n             * For some reason disabling then re-enabling the tracking fixes this issue.\r\n             */\r\n            this.outerTracker.setTracking(false);\r\n            this.outerTracker.setTracking(true);\r\n            this.viewer.raiseEvent('selection_cancel', false);\r\n            return this.undraw();\r\n        },\r\n    });\r\n\r\n    function onOutsideDrag(e) {\r\n        // Disable move when makeing new selection\r\n        this.viewer.setMouseNavEnabled(false);\r\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\r\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\r\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\r\n        if (!this.rect) {\r\n            if (this.restrictToImage) {\r\n                if (!pointIsInImage(this, start)) {\r\n                    return;\r\n                }\r\n                restrictVector(delta, end);\r\n            }\r\n            if (this.startRotated) {\r\n                this.rotatedStartPoint = start;\r\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\r\n            } else {\r\n                this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\r\n            }\r\n            this.rectDone = false;\r\n        } else {\r\n            var oldRect;\r\n            if (this.restrictToImage) {\r\n                oldRect = this.rect.clone();\r\n            }\r\n            if (this.rectDone) {\r\n                // All rotation as needed.\r\n                if (this.allowRotation) {\r\n                    var angle1 = this.rect.getAngleFromCenter(start);\r\n                    var angle2 = this.rect.getAngleFromCenter(end);\r\n                    this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\r\n                }\r\n            } else {\r\n                if (this.startRotated) {\r\n                    this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\r\n                } else {\r\n                    this.rect.width += delta.x;\r\n                    this.rect.height += delta.y;\r\n                }\r\n            }\r\n            var bounds = this.viewer.world.getHomeBounds();\r\n            if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\r\n                this.rect = oldRect;\r\n            }\r\n        }\r\n        this.draw();\r\n        this.viewer.raiseEvent('move_start', this.rect ? this.rect.normalize() : null);\r\n    }\r\n\r\n    function onOutsideDragEnd() {\r\n        // Resizing a selection will function\r\n        // when drawn any direction\r\n        if (this.rect.width < 0) {\r\n            this.rect.x += this.rect.width;\r\n            this.rect.width = Math.abs(this.rect.width);\r\n        }\r\n        if (this.rect.height < 0) {\r\n            this.rect.y += this.rect.height;\r\n            this.rect.height = Math.abs(this.rect.height);\r\n        }\r\n\r\n        // Eable move after new selection is done\r\n        this.viewer.setMouseNavEnabled(true);\r\n        this.rectDone = true;\r\n        this.viewer.raiseEvent('move_end', this.rect ? this.rect.normalize() : null);\r\n    }\r\n\r\n    function onClick() {\r\n        this.viewer.canvas.focus();\r\n    }\r\n\r\n    function onInsideDrag(e) {\r\n        $.addClass(this.element, 'dragging');\r\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\r\n        this.rect.x += delta.x;\r\n        this.rect.y += delta.y;\r\n        var bounds = this.viewer.world.getHomeBounds();\r\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\r\n            this.rect.x -= delta.x;\r\n            this.rect.y -= delta.y;\r\n        }\r\n        this.draw();\r\n        this.viewer.raiseEvent('move_start', this.rect ? this.rect.normalize() : null);\r\n    }\r\n\r\n    function onInsideDragEnd() {\r\n        $.removeClass(this.element, 'dragging');\r\n        this.viewer.raiseEvent('move_end', this.rect ? this.rect.normalize() : null);\r\n    }\r\n\r\n    function onBorderDrag(border, e) {\r\n        var delta = e.delta;\r\n        var rotation = this.rect.getDegreeRotation();\r\n        var center;\r\n        var oldRect = this.restrictToImage ? this.rect.clone() : null;\r\n        if (rotation !== 0) {\r\n            // adjust vector\r\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\r\n            center = this.rect.getCenter();\r\n        }\r\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\r\n        switch (border) {\r\n            case 0:\r\n                this.rect.y += delta.y;\r\n                this.rect.height -= delta.y;\r\n                break;\r\n            case 1:\r\n                this.rect.width += delta.x;\r\n                break;\r\n            case 2:\r\n                this.rect.height += delta.y;\r\n                break;\r\n            case 3:\r\n                this.rect.x += delta.x;\r\n                this.rect.width -= delta.x;\r\n                break;\r\n            case 0.5:\r\n                this.rect.y += delta.y;\r\n                this.rect.height -= delta.y;\r\n                this.rect.x += delta.x;\r\n                this.rect.width -= delta.x;\r\n                break;\r\n            case 1.5:\r\n                this.rect.y += delta.y;\r\n                this.rect.height -= delta.y;\r\n                this.rect.width += delta.x;\r\n                break;\r\n            case 2.5:\r\n                this.rect.width += delta.x;\r\n                this.rect.height += delta.y;\r\n                break;\r\n            case 3.5:\r\n                this.rect.height += delta.y;\r\n                this.rect.x += delta.x;\r\n                this.rect.width -= delta.x;\r\n                break;\r\n        }\r\n        if (rotation !== 0) {\r\n            // calc center deviation\r\n            var newCenter = this.rect.getCenter();\r\n            // rotate new center around old\r\n            var target = newCenter.rotate(rotation, center);\r\n            // adjust new center\r\n            delta = target.minus(newCenter);\r\n            this.rect.x += delta.x;\r\n            this.rect.y += delta.y;\r\n        }\r\n        var bounds = this.viewer.world.getHomeBounds();\r\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\r\n            this.rect = oldRect;\r\n        }\r\n        this.draw();\r\n        this.viewer.raiseEvent('move_start', this.rect ? this.rect.normalize() : null);\r\n    }\r\n\r\n    // After you have completed dragging, ensure the top left of the selection\r\n    // box is still the top left corner of the box\r\n    function onBorderDragEnd() {\r\n        if (this.rect.width < 0) {\r\n            this.rect.x += this.rect.width;\r\n            this.rect.width = Math.abs(this.rect.width);\r\n        }\r\n        if (this.rect.height < 0) {\r\n            this.rect.y += this.rect.height;\r\n            this.rect.height = Math.abs(this.rect.height);\r\n        }\r\n        this.viewer.raiseEvent('move_end', this.rect ? this.rect.normalize() : null);\r\n    }\r\n\r\n    function onKeyPress(e) {\r\n        var key = e.keyCode ? e.keyCode : e.charCode;\r\n        if (key === 13) {\r\n            this.confirm();\r\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\r\n            this.toggleState();\r\n        }\r\n    }\r\n\r\n    function getPrerotatedRect(start, end, height) {\r\n        if (start.x > end.x) {\r\n            // always draw left to right\r\n            var x = start;\r\n            start = end;\r\n            end = x;\r\n        }\r\n        var delta = end.minus(start);\r\n        var dist = start.distanceTo(end);\r\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\r\n        var center = new $.Point(\r\n            delta.x / 2 + start.x,\r\n            delta.y / 2 + start.y\r\n        );\r\n        var rect = new $.SelectionRect(\r\n            center.x - (dist / 2),\r\n            center.y - (height / 2),\r\n            dist,\r\n            height,\r\n            angle\r\n        );\r\n        var heightModDelta = new $.Point(0, height);\r\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\r\n        rect.x += heightModDelta.x / 2;\r\n        rect.y += heightModDelta.y / 2;\r\n        return rect;\r\n    }\r\n\r\n    function pointIsInImage(self, point) {\r\n        var bounds = self.viewer.world.getHomeBounds();\r\n        return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\r\n    }\r\n\r\n    function restrictVector(delta, end) {\r\n        var start;\r\n        for (var prop in { x: 0, y: 0 }) {\r\n            start = end[prop] - delta[prop];\r\n            if (start < 1 && start > 0) {\r\n                if (end[prop] > 1) {\r\n                    delta[prop] -= end[prop] - 1;\r\n                    end[prop] = 1;\r\n                } else if (end[prop] < 0) {\r\n                    delta[prop] -= end[prop];\r\n                    end[prop] = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n})(OpenSeadragon);\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class Overlay\r\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @param {Object} options\r\n     * @param {Element} options.element\r\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\r\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\r\n     * is specified, the overlay will keep a constant size independently of the\r\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\r\n     * be adjusted when the zoom changes.\r\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\r\n     * Relative position to the viewport.\r\n     * Only used if location is a {@link OpenSeadragon.Point}.\r\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\r\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\r\n     * check the size of the overlay everytime it is drawn when using a\r\n     * {@link OpenSeadragon.Point} as options.location. It will improve\r\n     * performances but will cause a misalignment if the overlay size changes.\r\n     */\r\n    $.SelectionOverlay = function( element, location) {\r\n        $.Overlay.apply( this, arguments );\r\n\r\n        // set the rotation in radians\r\n        if ( $.isPlainObject( element ) ) {\r\n            this.rotation = element.location.rotation || 0;\r\n        } else {\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    };\r\n\r\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @param {Element} container\r\n         */\r\n        drawHTML: function() {\r\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\r\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\r\n                ' rotate(' + this.rotation + 'rad)';\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\r\n         * @param {OpenSeadragon.OverlayPlacement} position\r\n         */\r\n        update: function( location ) {\r\n            $.Overlay.prototype.update.apply( this, arguments );\r\n            this.rotation = location.rotation || 0;\r\n        }\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n","(function( $ ){\r\n    'use strict';\r\n\r\n    /**\r\n     * @class SelectionRect\r\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\r\n     * around the center point\r\n     *\r\n     * @memberof OpenSeadragon\r\n     * @extends OpenSeadragon.Rect\r\n     * @param {Number} x The vector component 'x'.\r\n     * @param {Number} y The vector component 'y'.\r\n     * @param {Number} width The vector component 'height'.\r\n     * @param {Number} height The vector component 'width'.\r\n     * @param {Number} rotation The rotation in radians\r\n     */\r\n    $.SelectionRect = function( x, y, width, height, rotation ) {\r\n        $.Rect.apply( this, [ x, y, width, height ] );\r\n\r\n        /**\r\n         * The rotation in radians\r\n         * @member {Number} rotation\r\n         * @memberof OpenSeadragon.SelectionRect#\r\n         */\r\n        this.rotation = rotation || 0;\r\n    };\r\n\r\n    $.SelectionRect.fromRect = function(rect) {\r\n        return new $.SelectionRect(\r\n            rect.x,\r\n            rect.y,\r\n            rect.width,\r\n            rect.height\r\n        );\r\n    };\r\n\r\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\r\n\r\n        /**\r\n         * @function\r\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\r\n         */\r\n        clone: function() {\r\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\r\n        },\r\n\r\n        /**\r\n         * Determines if two Rectangles have equivalent components.\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\r\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\r\n         */\r\n        equals: function( other ) {\r\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\r\n                ( this.rotation === other.rotation );\r\n        },\r\n\r\n        /**\r\n         * Provides a string representation of the rectangle which is useful for\r\n         * debugging.\r\n         * @function\r\n         * @returns {String} A string representation of the rectangle.\r\n         */\r\n        toString: function() {\r\n            return '[' +\r\n                (Math.round(this.x*100) / 100) + ',' +\r\n                (Math.round(this.y*100) / 100) + ',' +\r\n                (Math.round(this.width*100) / 100) + 'x' +\r\n                (Math.round(this.height*100) / 100) + '@' +\r\n                (Math.round(this.rotation*100) / 100) +\r\n            ']';\r\n        },\r\n\r\n        swapWidthHeight: function() {\r\n            var swapped = this.clone();\r\n            swapped.width = this.height;\r\n            swapped.height = this.width;\r\n            swapped.x += (this.width - this.height) / 2;\r\n            swapped.y += (this.height - this.width) / 2;\r\n            return swapped;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @returns {Number} The rotaion in degrees\r\n         */\r\n        getDegreeRotation: function() {\r\n            return this.rotation * (180/Math.PI);\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Point} point\r\n         * @returns {Number} The angle in radians\r\n         */\r\n        getAngleFromCenter: function(point) {\r\n            var diff = point.minus(this.getCenter());\r\n            return Math.atan2(diff.x, diff.y);\r\n        },\r\n\r\n        /**\r\n         * Rounds pixel coordinates\r\n         * @function\r\n         * @returns {SelectionRect} The altered rect\r\n         */\r\n        round: function() {\r\n            return new $.SelectionRect(\r\n                Math.round(this.x),\r\n                Math.round(this.y),\r\n                Math.round(this.width),\r\n                Math.round(this.height),\r\n                this.rotation\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Fixes negative width/height, rotation larger than PI\r\n         * @function\r\n         * @returns {SelectionRect} The normalized rect\r\n         */\r\n        normalize: function() {\r\n            var fixed = this.clone();\r\n            if (fixed.width < 0) {\r\n                fixed.x += fixed.width;\r\n                fixed.width *= -1;\r\n            }\r\n            if (fixed.height < 0) {\r\n                fixed.y += fixed.height;\r\n                fixed.height *= -1;\r\n            }\r\n            fixed.rotation %= Math.PI;\r\n            return fixed;\r\n        },\r\n\r\n        /**\r\n         * @function\r\n         * @param {OpenSeadragon.Rect} area\r\n         * @returns {Boolean} Does this rect fit in a specified area\r\n         */\r\n        fitsIn: function(area) {\r\n            var rect = this.normalize();\r\n            var corners = [\r\n                rect.getTopLeft(),\r\n                rect.getTopRight(),\r\n                rect.getBottomRight(),\r\n                rect.getBottomLeft(),\r\n            ];\r\n            var center = rect.getCenter();\r\n            var rotation = rect.getDegreeRotation();\r\n            var areaEnd = area.getBottomRight();\r\n            for (var i = 0; i < 4; i++) {\r\n                corners[i] = corners[i].rotate(rotation, center);\r\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\r\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\r\n         * @function\r\n         * @returns {SelectionRect} The altered rect\r\n         */\r\n        reduceRotation: function() {\r\n            var reduced;\r\n            if (this.rotation < Math.PI / (-4)) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation += Math.PI / 2;\r\n            } else if (this.rotation > Math.PI / 4) {\r\n                reduced = this.swapWidthHeight();\r\n                reduced.rotation -= Math.PI / 2;\r\n            } else {\r\n                reduced = this.clone();\r\n            }\r\n            return reduced;\r\n        },\r\n    });\r\n\r\n}( OpenSeadragon ));\r\n"]}